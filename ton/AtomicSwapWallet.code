.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode _codeAtomicSwap
;; decode TvmCell
LDREF
ENDS
;; param: _codeAtomicSwap
; constructor AtomicSwapWallet
GETGLOB 2
NEQINT 0
THROWIFNOT 100
ACCEPT
; expValue
; end expValue
;; push identifier _codeAtomicSwap
DUP
; colValue
SETGLOB 10
; end colValue
DROP
; end constructor AtomicSwapWallet
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	createSwap
.public	createSwap
.type	createSwap, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode participant
LDMSGADDR
; Decode amount
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode time
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode data
;; decode TvmCell
LDREF
ENDS
;; param: participant
;; param: amount
;; param: time
;; param: data
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function createSwap
;; !
;; address.isNone()
;; push identifier participant
PUSH S3
PUSHSLICE x2_
SDEQ
NOT
THROWIFNOT 400
MYADDR
;; push identifier participant
PUSH S4
SDEQ
NOT
THROWIFNOT 401
;; push identifier time
PUSH S1
GTINT 0
THROWIFNOT 402
;; get member balance
GETPARAM 7
INDEX 0
;; push identifier amount
PUSH S3
PUSHINT 1000000000
;; +
ADD
UFITS 128
;; >=
GEQ
THROWIFNOT 404
;; push identifier codeAtomicSwap
GETGLOB 10
;; push identifier data
PUSH S1
CALL $build_state_init_macro$
;; decl: atomicSwapStateInit
;; push identifier atomicSwapStateInit
DUP
DUP
HASHCU
CALL $make_std_address_with_zero_wid_macro$
;; push identifier amount
PUSH S5
PUSHINT 1000000000
;; +
ADD
UFITS 128
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 1
NEWC
STSLICECONST x09409c23
;; _participant
;; push identifier participant
PUSH S8
STSLICER
;; _amount
;; push identifier amount
PUSH S7
STUR 128
;; _time
;; push identifier time
PUSH S6
STUR 32
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: atomicSwap
;; return
NIP
;; emitting 1 value(s)
PUSH S5
EQINT -1
PUSHCONT {
	PUSH S7
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc003d8fa
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
DROP
; end function createSwap
BLKDROP 4
; end modifier onlyOwnerAndAccept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	createSwap_internal
.type	createSwap_internal, @function
;; param: participant
;; param: amount
;; param: time
;; param: data
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function createSwap
;; !
;; address.isNone()
;; push identifier participant
PUSH S3
PUSHSLICE x2_
SDEQ
NOT
THROWIFNOT 400
MYADDR
;; push identifier participant
PUSH S4
SDEQ
NOT
THROWIFNOT 401
;; push identifier time
PUSH S1
GTINT 0
THROWIFNOT 402
;; get member balance
GETPARAM 7
INDEX 0
;; push identifier amount
PUSH S3
PUSHINT 1000000000
;; +
ADD
UFITS 128
;; >=
GEQ
THROWIFNOT 404
;; push identifier codeAtomicSwap
GETGLOB 10
;; push identifier data
PUSH S1
CALL $build_state_init_macro$
;; decl: atomicSwapStateInit
;; push identifier atomicSwapStateInit
DUP
DUP
HASHCU
CALL $make_std_address_with_zero_wid_macro$
;; push identifier amount
PUSH S5
PUSHINT 1000000000
;; +
ADD
UFITS 128
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 1
NEWC
STSLICECONST x09409c23
;; _participant
;; push identifier participant
PUSH S8
STSLICER
;; _amount
;; push identifier amount
PUSH S7
STUR 128
;; _time
;; push identifier time
PUSH S6
STUR 32
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: atomicSwap
;; return
NIP
TUPLE 1
SETGLOB 8
; end function createSwap
BLKDROP 4
; end modifier onlyOwnerAndAccept
GETGLOB 8
UNTUPLE 1

.globl	onInitiate
.public	onInitiate
.type	onInitiate, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; function onInitiate
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S1
SWAP
; end expValue
;; get member sender
GETGLOB 9
; colValue
ROTREV
PUSHINT 256
DICTUSET
SETGLOB 11
; end colValue
;; emit OnInitiate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x443b3bc4
;; secretHash
;; push identifier secretHash
PUSH S1
STUR 256
;; atomicSwap
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function onInitiate
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	onInitiate_internal
.type	onInitiate_internal, @function
;; param: secretHash
; function onInitiate
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S1
SWAP
; end expValue
;; get member sender
GETGLOB 9
; colValue
ROTREV
PUSHINT 256
DICTUSET
SETGLOB 11
; end colValue
;; emit OnInitiate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x443b3bc4
;; secretHash
;; push identifier secretHash
PUSH S1
STUR 256
;; atomicSwap
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function onInitiate

.globl	onParticipate
.public	onParticipate
.type	onParticipate, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; function onParticipate
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
; expValue
;; fetch participantAtomicSwaps
GETGLOB 12
;; push identifier secretHash
PUSH S1
SWAP
; end expValue
;; get member sender
GETGLOB 9
; colValue
ROTREV
PUSHINT 256
DICTUSET
SETGLOB 12
; end colValue
;; emit OnParticipate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1911ce72
;; secretHash
;; push identifier secretHash
PUSH S1
STUR 256
;; atomicSwap
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function onParticipate
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	onParticipate_internal
.type	onParticipate_internal, @function
;; param: secretHash
; function onParticipate
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
; expValue
;; fetch participantAtomicSwaps
GETGLOB 12
;; push identifier secretHash
PUSH S1
SWAP
; end expValue
;; get member sender
GETGLOB 9
; colValue
ROTREV
PUSHINT 256
DICTUSET
SETGLOB 12
; end colValue
;; emit OnParticipate
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1911ce72
;; secretHash
;; push identifier secretHash
PUSH S1
STUR 256
;; atomicSwap
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function onParticipate

.globl	redeem
.public	redeem
.type	redeem, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secret
LDU 256
; Decode secretHash
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: secret
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function redeem
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier participantAtomicSwaps
GETGLOB 12
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 406
NEWC
;; push identifier secret
PUSH S3
STUR 256
ENDC
CTOS
SHA256U
;; uint256
UFITS 256
;; decl: computed_hash
;; push identifier computed_hash
DUP
;; push identifier secretHash
PUSH S3
;; ==
EQUAL
THROWIFNOT 413
;; push identifier atomicSwap
PUSH S1
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.redeem
STSLICECONST 0
STSLICECONST x36f8d75c
;; secret
;; push identifier secret
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function redeem
DROP2
; end modifier onlyOwnerAndAccept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	redeem_internal
.type	redeem_internal, @function
;; param: secret
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function redeem
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier participantAtomicSwaps
GETGLOB 12
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 406
NEWC
;; push identifier secret
PUSH S3
STUR 256
ENDC
CTOS
SHA256U
;; uint256
UFITS 256
;; decl: computed_hash
;; push identifier computed_hash
DUP
;; push identifier secretHash
PUSH S3
;; ==
EQUAL
THROWIFNOT 413
;; push identifier atomicSwap
PUSH S1
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.redeem
STSLICECONST 0
STSLICECONST x36f8d75c
;; secret
;; push identifier secret
PUSH S4
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function redeem
DROP2
; end modifier onlyOwnerAndAccept

.globl	refund
.public	refund
.type	refund, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function refund
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 407
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.refund
STSLICECONST 0
STSLICECONST x39a212f4
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function refund
DROP
; end modifier onlyOwnerAndAccept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	refund_internal
.type	refund_internal, @function
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function refund
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 407
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.refund
STSLICECONST 0
STSLICECONST x39a212f4
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function refund
DROP
; end modifier onlyOwnerAndAccept

.globl	destruct
.public	destruct
.type	destruct, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function destruct
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 407
;; delete
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 11
; end colValue
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.destruct
STSLICECONST 0
STSLICECONST x47c62dda
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function destruct
DROP
; end modifier onlyOwnerAndAccept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	destruct_internal
.type	destruct_internal, @function
;; param: secretHash
; modifier onlyOwnerAndAccept
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 100
ACCEPT
; function destruct
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 407
;; delete
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 11
; end colValue
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x405f5e100000000000000000000000000004_
STSLICER
STSLICECONST 0
;; Remote call IAtomicSwap.destruct
STSLICECONST 0
STSLICECONST x47c62dda
ENDC
PUSHINT 1
SENDRAWMSG
DROP
; end function destruct
DROP
; end modifier onlyOwnerAndAccept

.globl	onRedeem
.public	onRedeem
.type	onRedeem, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; function onRedeem
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier participantAtomicSwaps
GETGLOB 12
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 408
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 409
;; delete
; expValue
;; fetch participantAtomicSwaps
GETGLOB 12
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 12
; end colValue
;; emit OnRedeemed
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x48460f78
;; secretHash
;; push identifier secretHash
PUSH S2
STUR 256
;; amount
;; get member value
CALL $message_balance_macro$
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function onRedeem
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	onRedeem_internal
.type	onRedeem_internal, @function
;; param: secretHash
; function onRedeem
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier participantAtomicSwaps
GETGLOB 12
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 408
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 409
;; delete
; expValue
;; fetch participantAtomicSwaps
GETGLOB 12
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 12
; end colValue
;; emit OnRedeemed
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x48460f78
;; secretHash
;; push identifier secretHash
PUSH S2
STUR 256
;; amount
;; get member value
CALL $message_balance_macro$
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function onRedeem

.globl	onRefund
.public	onRefund
.type	onRefund, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode secretHash
LDU 256
ENDS
;; param: secretHash
; function onRefund
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 410
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 411
;; delete
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 11
; end colValue
;; emit OnRefunded
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x31ae4915
;; secretHash
;; push identifier secretHash
PUSH S2
STUR 256
;; amount
;; get member value
CALL $message_balance_macro$
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function onRefund
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	onRefund_internal
.type	onRefund_internal, @function
;; param: secretHash
; function onRefund
;; map.fetch
;; push identifier secretHash
DUP
;; push identifier initiatorAtomicSwaps
GETGLOB 11
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
DROP
;; decl: atomicSwap
;; push identifier atomicSwap
DUP
ISNULL
NOT
THROWIFNOT 410
;; push identifier atomicSwap
DUP
DUP
ISNULL
THROWIF 63
;; get member sender
GETGLOB 9
SDEQ
THROWIFNOT 411
;; delete
; expValue
;; fetch initiatorAtomicSwaps
GETGLOB 11
;; push identifier secretHash
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 256
DICTUDEL
DROP
; colValue
NIP
SETGLOB 11
; end colValue
;; emit OnRefunded
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x31ae4915
;; secretHash
;; push identifier secretHash
PUSH S2
STUR 256
;; amount
;; get member value
CALL $message_balance_macro$
STUR 256
ENDC
PUSHINT 1
SENDRAWMSG
DROP2
; end function onRefund

.globl	hashSecret
.public	hashSecret
.type	hashSecret, @function
; Decode input parameters
; Decode secret
LDREF
ENDS
;; param: secret
; function hashSecret
;; return
;; push identifier secret
DUP
CTOS
SHA256U
;; uint256
UFITS 256
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa589af14
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
DROP
; end function hashSecret
EQINT -1
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	hashSecret_internal
.type	hashSecret_internal, @function
;; param: secret
; function hashSecret
;; return
;; push identifier secret
DUP
CTOS
SHA256U
;; uint256
UFITS 256
NIP
; end function hashSecret

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
REVERSE 4, 0
STREF
STDICT
STDICT
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREF
LDDICT
PLDDICT
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREF
	LDDICT
	PLDDICT
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init codeAtomicSwap
	NEWC
	ENDC
	SETGLOB 10
	; init initiatorAtomicSwaps
	NEWDICT
	SETGLOB 11
	; init participantAtomicSwaps
	NEWDICT
	SETGLOB 12
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDSLICE 3
NIP
LDI 1     ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	PUSHINT 1
	CALL 1
	CALL $c4_to_c7$
	;; param: slice
	; function onBounce
	; expValue
	DUP
	; end expValue
	LDU 32
	; colValue
	POP s2
	; end colValue
	;; decl: functionId
	;; if
	;; push identifier functionId
	DUP
	PUSHINT 966922996
	;; ==
	EQUAL
	PUSHCONT {
		;; emit Error
		NEWC
		PUSHSLICE xc0000000000000000000000002_
		STSLICER
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x143d74e8
		;; code
		PUSHINT 500
		STUR 32
		ENDC
		PUSHINT 1
		SENDRAWMSG
	}
	PUSHCONT {
		;; if
		;; push identifier functionId
		DUP
		PUSHINT 922277724
		;; ==
		EQUAL
		PUSHCONT {
			;; emit Error
			NEWC
			PUSHSLICE xc0000000000000000000000002_
			STSLICER
			STSLICECONST 0
			STSLICECONST 0
			STSLICECONST x143d74e8
			;; code
			PUSHINT 501
			STUR 32
			ENDC
			PUSHINT 1
			SENDRAWMSG
		}
		PUSHCONT {
			;; emit Error
			NEWC
			PUSHSLICE xc0000000000000000000000002_
			STSLICER
			STSLICECONST 0
			STSLICECONST 0
			STSLICECONST x143d74e8
			;; code
			PUSHINT 502
			STUR 32
			ENDC
			PUSHINT 1
			SENDRAWMSG
		}
		IFELSE
		;; end if
	}
	IFELSE
	;; end if
	DROP2
	; end function onBounce
	CALL $c7_to_c4$
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
PUSHCONT {
}
IFJMP
PUSH S1            ; body
LDUQ 32            ; [funcId] body' ok
PUSHCONT {
	THROW 60
}
IFNOTJMP
PUSH2 S1,S1        ; funcId body' funcId funcId
PUSHCONT {
}
IFNOTJMP
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	THROW 60
}
IFJMP
SWAP  ; body' funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	THROW 60
}
IF

